Assignment name  : mini_serv
Expected files   : mini_serv.c
Allowed functions: write, close, select, socket, accept, listen, send, recv, bind, strstr, malloc, realloc, free, calloc, bzero, atoi, sprintf, strlen, exit, strcpy, strcat, memset
--------------------------------------------------------------------------------

Write a program that will listen for client to connect on a certain port on 127.0.0.1 and will let clients to speak with each other

This program will take as first argument the port to bind to
If no argument is given, it should write in stderr "Wrong number of arguments" followed by a \n and exit with status 1
If a System Calls returns an error before the program start accepting connection, it should write in stderr "Fatal error" followed by a \n and exit with status 1
If you cant allocate memory it should write in stderr "Fatal error" followed by a \n and exit with status 1

Your program must be non-blocking but client can be lazy and if they don't read your message you must NOT disconnect them...

Your program must not contains #define preproc
Your program must only listen to 127.0.0.1
The fd that you will receive will already be set to make 'recv' or 'send' to block if select hasn't be called before calling them, but will not block otherwise. 

When a client connect to the server:
- the client will be given an id. the first client will receive the id 0 and each new client will received the last client id + 1
- %d will be replace by this number
- a message is sent to all the client that was connected to the server: "server: client %d just arrived\n"

clients must be able to send messages to your program.
- message will only be printable characters, no need to check
- a single message always end with a \n
- a single message will never be longer than 4096 characters
- when the server receive a message, it must resend it to all the other client with "client %d: " before the message

When a client disconnect from the server:
- a message is sent to all the client that was connected to the server: "server: client %d just left\n"

Memory or fd leaks are forbidden

To help you, you will find the file main.c with the beginning of a server and maybe some useful functions. (Beware this file use forbidden functions or write things that must not be there in your final program)

Warning our tester is expecting that you send the messages as fast as you can. Don't do un-necessary buffer.

Evaluation can be a bit longer than usual...

Hint: you can use nc to test your program
Hint: you should use nc to test your program
Hint: To test you can use fcntl(fd, F_SETFL, O_NONBLOCK) but use select and NEVER check EAGAIN (man 2 send)

--------------------------------------------------------------------------------
RU

Напишите программу, которая будет прослушивать подключение клиента к определенному порту на 127.0.0.1 и позволит клиентам разговаривать друг с другом

Эта программа будет принимать в качестве первого аргумента порт для привязки

Если аргумент не задан, он должен написать в stderr "Wrong number of arguments", за которым следует \n и выйти со статусом 1

Если системный вызов возвращает ошибку до того, как программа начнет принимать соединение, она должна написать в stderr "Fatal error", а затем \n и выйти со статусом 1

Если вы не можете выделить память, он должен написать в stderr "Fatal error" с последующим \n и выйти со статусом 1

Ваша программа должна быть неблокирующей, но клиент может быть ленивым, и если он не читает ваше сообщение, вы не должны отключать его...

Ваша программа не должна содержать препроцессор #define

Ваша программа должна слушать только 127.0.0.1

Fd, который вы получите, уже будет настроен на блокировку 'recv' или 'send', если select не был вызван до их вызова, но в противном случае не будет заблокирован.

Когда клиент подключается к серверу:
- клиенту будет выдано удостоверение личности. первый клиент получит идентификатор 0, а каждый новый клиент получит последний идентификатор клиента + 1
- %d будет заменено на это число
- всем клиентам, которые были подключены к серверу, отправляется сообщение: "server: client %d just arrived\n"

клиенты должны иметь возможность отправлять сообщения в вашу программу.
- сообщение будет состоять только из печатаемых символов, проверять его не нужно
- одно сообщение всегда заканчивается на \n
- одно сообщение никогда не будет длиннее 4096 символов
- когда сервер получает сообщение, он должен повторно отправить его всем другим клиентам с "client %d: " перед сообщением

Когда клиент отключается от сервера:
- всем клиентам, которые были подключены к серверу, отправляется сообщение: "server: client %d just left\n"

Утечки памяти или fd запрещены

Чтобы помочь вам, вы найдете файл main.c с началом работы сервера и, возможно, некоторые полезные функции. (Остерегайтесь, чтобы этот файл использовал запрещенные функции или писал вещи, которых не должно быть в вашей окончательной программе)

Предупреждение наш тестер ожидает, что вы отправите сообщения так быстро, как только сможете. Не делайте ненужного буфера.

Оценка может быть немного дольше, чем обычно...

Подсказка: вы можете использовать nc для тестирования вашей программы
Подсказка: вы должны использовать nc для тестирования вашей программы
Подсказка: Для тестирования вы можете использовать fcntl(fd, F_SETFL, O_NONBLOCK), но используйте select и НИКОГДА НЕ проверяйте СНОВА (man 2 send)
